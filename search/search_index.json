{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"viame2coco","text":"<p>This package contains tools for converting VIAME-style annotation csv output into COCO format.</p>"},{"location":"#installation","title":"Installation","text":"<p><code>pip install viame2coco</code></p>"},{"location":"#contributing","title":"Contributing","text":"<p>We would love to have your contributions that improve current functionality, fix bugs, or add new features.  See the contributing guidelines for more info.</p>"},{"location":"#disclaimer","title":"Disclaimer","text":"<p>This repository is a scientific product and is not official communication of the National Oceanic and Atmospheric Administration, or the United States Department of Commerce. All NOAA GitHub project code is provided on an \u2018as is\u2019 basis and the user assumes responsibility for its use. Any claims against the Department of Commerce or Department of Commerce bureaus stemming from the use of this GitHub project will be governed by all applicable Federal law. Any reference to specific commercial products, processes, or services by service mark, trademark, manufacturer, or otherwise, does not constitute or imply their endorsement, recommendation or favoring by the Department of Commerce. The Department of Commerce seal and logo, or the seal and logo of a DOC bureau, shall not be used in any manner to imply endorsement of any commercial product or activity by DOC or the United States Government.</p>"},{"location":"CODE_OF_CONDUCT/","title":"Code of Conduct","text":"<p>This code of conduct was developed and adapted from the Atom code of conduct in October 2021. </p>"},{"location":"CODE_OF_CONDUCT/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"CODE_OF_CONDUCT/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a professional setting</li> </ul>"},{"location":"CODE_OF_CONDUCT/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"CODE_OF_CONDUCT/#scope","title":"Scope","text":"<p>This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"CODE_OF_CONDUCT/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. Further details of specific enforcement policies may be posted separately.</p>"},{"location":"CODE_OF_CONDUCT/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://contributor-covenant.org/version/1/4</p>"},{"location":"CONTRIBUTING/","title":"Contributing Guidelines","text":"<p>Pull requests, bug reports, and all other forms of contribution are welcomed and highly encouraged! </p>"},{"location":"CONTRIBUTING/#contents","title":"Contents","text":"<ul> <li>Code of Conduct</li> <li>Bug Reports</li> <li>Feature Requests</li> <li>Submitting Pull Requests</li> <li>Code Review</li> <li>Coding Style</li> <li>Documentation</li> <li>Certificate of Origin</li> </ul> <p>This guide serves to set clear expectations for everyone involved with the project so that we can improve it together while also creating a welcoming space for everyone to participate. Following these guidelines will help ensure a positive experience for contributors and maintainers.</p>"},{"location":"CONTRIBUTING/#code-of-conduct","title":"Code of Conduct","text":"<p>Please review our Code of Conduct. It is in effect at all times. We expect it to be honored by everyone who contributes to this project. Acting like an asshole will not be tolerated.</p>"},{"location":"CONTRIBUTING/#bug-reports","title":"Bug Reports","text":"<p>Please include a minimal reproducible example with your bug report.</p>"},{"location":"CONTRIBUTING/#feature-requests","title":"Feature Requests","text":"<p>Feature requests are welcome if they fit within the scope of the project.</p> <p>Feature requests that you are willing to complete are especially welcome.  </p>"},{"location":"CONTRIBUTING/#submitting-pull-requests","title":"Submitting Pull Requests","text":"<p>Please submit an issue first and get community buy-in for proposed changes before doing any work.</p> <p>Please submit PRs in the smallest possible non-breaking chunks.</p>"},{"location":"CONTRIBUTING/#code-review","title":"Code Review","text":"<p>Any code pulled into this repo should be reviewed by a maintainer.</p> <p>Remember:</p> <ul> <li> <p>Review the code, not the author. Look for and suggest improvements without disparaging or insulting the author. Provide actionable feedback and explain your reasoning.</p> </li> <li> <p>You are not your code. When your code is critiqued, questioned, or constructively criticized, remember that you are not your code. Do not take code review personally.</p> </li> </ul>"},{"location":"CONTRIBUTING/#coding-style","title":"Coding Style","text":"<p>Follow the existing style.  We use the VSCode autopep8 linter.</p>"},{"location":"CONTRIBUTING/#documentation","title":"Documentation","text":"<p>Please include typing and docstrings for any classes.  We use numpy style docstrings.  Our auto-documentation is configured to parse this style, so please follow this convention.</p>"},{"location":"CONTRIBUTING/#testing","title":"Testing","text":"<p>Please write tests for your code.  Tests should be discoverable or runnable on a file-by-file basis.  Make sure all tests pass before submitting a pull request. </p> <pre><code>python -m unittest discover tests\n</code></pre>"},{"location":"CONTRIBUTING/#certificate-of-origin","title":"Certificate of Origin","text":"<p>WHEN YOU SUBMIT CODE TO THIS REPOSITORY, YOU AGREE TO LICENSE YOUR CODE UNDER THE LICENSE</p> <p>Developer's Certificate of Origin 1.1</p> <p>By making a contribution to this project, I certify that:</p> <ol> <li>The contribution was created in whole or in part by me and I have the right to submit it under the open source license indicated in the file; or</li> <li>The contribution is based upon previous work that, to the best of my knowledge, is covered under an appropriate open source license and I have the right under that license to submit that work with modifications, whether created in whole or in part by me, under the same open source license (unless I am permitted to submit under a different license), as indicated in the file; or</li> <li>The contribution was provided directly to me by some other person who certified (1), (2) or (3) and I have not modified it.</li> <li>I understand and agree that this project and the contribution are public and that a record of the contribution (including all personal information I submit with it, including my sign-off) is maintained indefinitely and may be redistributed consistent with this project or the open source license(s) involved.</li> </ol>"},{"location":"api/viame2coco/","title":"Viame2COCO","text":""},{"location":"api/viame2coco/#viame2coco.viame2coco.construct_image_filename_from_video_frame","title":"<code>construct_image_filename_from_video_frame(video_filename, time, outfile_format, outfile_dir)</code>","text":"<p>construct a filename from a given video file and frame time</p> <p>Parameters:</p> Name Type Description Default <code>video_filename</code> <code>str</code> <p>the file name of the video.  This will be formatted into the outfile_format as <code>video_filename</code>.  See that arg for more details.</p> required <code>time</code> <code>time</code> <p>the time that locates the desired frame in the video</p> required <code>outfile_format</code> <code>str | None</code> <p>if None, defaults to '{video_filename}.%H.%M.%S.%f.jpg' <code>video_filename</code> is the argument of this name to this function The remainder is passed through a <code>strftime</code> from the time arg, see the <code>strftime</code> docs the extension <code>.jpg</code> will determine the output file format if this filename is used to write an image file.</p> required <code>outfile_dir</code> <code>str | None</code> <p>if not None, this is simply path joined to the filename output</p> required <p>Returns:</p> Name Type Description <code>frame_filename</code> <code>str</code> <p>a filename appropriate for the specified frame in the video</p> Source code in <code>viame2coco/viame_manual_annotations.py</code> <pre><code>def construct_image_filename_from_video_frame(\n        video_filename: str, \n        time: datetime.time, \n        outfile_format: str | None, \n        outfile_dir: str | None) -&gt; str:\n    '''\n    construct a filename from a given video file and frame time\n\n    Parameters\n    ----------\n    video_filename: str\n        the file name of the video.  This will be formatted into the\n        outfile_format as `video_filename`.  See that arg for more details.\n    time: datetime.time\n        the time that locates the desired frame in the video\n    outfile_format: str | None\n        if None, defaults to '{video_filename}.%H.%M.%S.%f.jpg'\n        `video_filename` is the argument of this name to this function\n        The remainder is passed through a `strftime` from the time arg,\n        see the [`strftime` docs](https://docs.python.org/3/library/datetime.html#format-codes)\n        the extension `.jpg` will determine the output file format if this\n        filename is used to write an image file.\n    outfile_dir: str | None\n        if not None, this is simply path joined to the filename output\n\n    Returns\n    -------\n    frame_filename: str\n        a filename appropriate for the specified frame in the video\n    '''\n    if outfile_format is None:\n        outfile_format = '{video_filename}.%H.%M.%S.%f.jpg'\n    frame_filename = time.strftime(outfile_format).format(video_filename = video_filename)\n    if outfile_dir is not None:\n        frame_filename = os.path.join(outfile_dir, frame_filename)\n    return frame_filename\n</code></pre>"},{"location":"api/viame2coco/#viame2coco.viame2coco.extract_frame_microseconds","title":"<code>extract_frame_microseconds(cv2_video_cap, microseconds, outfile=None)</code>","text":"<p>extract a frame from the provided cv2 video at the given number  of microseconds.  Optionally write the frame to outfile.</p> <p>Parameters:</p> Name Type Description Default <code>cv2_video_cap</code> <code>VideoCapture</code> <p>the video from which to capture the frame</p> required <code>microseconds</code> <code>float</code> <p>the location in microseconds into the video at which to extract the desired frame</p> required <code>outfile</code> <code>str | None</code> <p>the optional filename to which the desired frame should  be writ</p> <code>None</code> <p>Returns:</p> Name Type Description <code>image</code> <code>ndarray | None</code> <p>the video frame at the given number of microseconds, or None if the frame read was unsuccessful.  Additionally, the frame may be written to a file as a side-effect if <code>outfile</code> was passed as an argument.</p> Source code in <code>viame2coco/viame_manual_annotations.py</code> <pre><code>def extract_frame_microseconds(\n        cv2_video_cap: cv2.VideoCapture, \n        microseconds: float, \n        outfile: str | None = None) -&gt; np.ndarray | None:\n    '''\n    extract a frame from the provided cv2 video at the given number \n    of microseconds.  Optionally write the frame to outfile.\n\n    Parameters\n    ----------\n    cv2_video_cap: cv2.VideoCapture\n        the video from which to capture the frame\n    microseconds: float\n        the location in microseconds into the video\n        at which to extract the desired frame\n    outfile: str | None:\n        the optional filename to which the desired frame should \n        be writ\n    Returns\n    -------\n    image: numpy.ndarray | None\n        the video frame at the given number of microseconds, or None\n        if the frame read was unsuccessful.  Additionally, the frame\n        may be written to a file as a side-effect if `outfile` was\n        passed as an argument.\n    '''\n    cv2_video_cap.set(cv2.CAP_PROP_POS_MSEC, microseconds // 1000)\n    success, image = cv2_video_cap.read()\n    if outfile is not None:\n        cv2.imwrite(outfile, image)\n    return image\n</code></pre>"},{"location":"api/viame2coco/#viame2coco.viame2coco.extract_viame_video_annotations","title":"<code>extract_viame_video_annotations(viame_csv, video_file, outfile_format=None, outfile_dir=None)</code>","text":"<p>extract the manual annotations and frames from a VIAME-style annotaiton csv</p> <p>Writes the frames to files.</p> <p>Parameters:</p> Name Type Description Default <code>viame_csv</code> <code>Iterable[Sequence]</code> <p>the data rows from a VIAME-style annotation csv should not include the headers</p> required <code>video_filename</code> <p>the file name of the video.  This will be formatted into the outfile_format as <code>video_filename</code>.  See that arg for more details.</p> required <code>outfile_format</code> <code>str | None</code> <p>see <code>construct_image_filename_from_video_frame</code> signature</p> <code>None</code> <code>outfile_dir</code> <code>str | None</code> <p>see <code>construct_image_filename_from_video_frame</code> signature</p> <code>None</code> <p>Returns:</p> Name Type Description <code>viame_csv</code> <code>Iterable[Sequence]</code> <p>the data rows in the input only when the annotations are manual, skipping any automated annotations</p> Source code in <code>viame2coco/viame_manual_annotations.py</code> <pre><code>def extract_viame_video_annotations(\n        viame_csv: Iterable[Sequence], \n        video_file: str, \n        outfile_format: str | None = None, \n        outfile_dir: str | None = None) -&gt; Iterable[Sequence]:\n    '''\n    extract the manual annotations and frames from a VIAME-style\n    annotaiton csv\n\n    Writes the frames to files.\n\n    Parameters\n    ----------\n    viame_csv: Iterable[Sequence]\n        the data rows from a VIAME-style annotation csv\n        should not include the headers\n    video_filename: str\n        the file name of the video.  This will be formatted into the\n        outfile_format as `video_filename`.  See that arg for more details.\n    outfile_format: str | None\n        see `construct_image_filename_from_video_frame` signature\n    outfile_dir: str | None\n        see `construct_image_filename_from_video_frame` signature\n\n    Returns\n    -------\n    viame_csv: Iterable[Sequence]\n        the data rows in the input only when the annotations\n        are manual, skipping any automated annotations\n    '''\n    cap = cv2.VideoCapture(video_file)\n    video_filename_leaf = os.path.split(video_file)[1]\n    if outfile_dir is not None:\n        os.makedirs(outfile_dir, exist_ok=True)\n    for row in filter_viame_manual_annotations(viame_csv):\n        frame_time = datetime.time.fromisoformat(row[VIAME_VIDEO_TIME_COL])\n        microseconds = time2micros(frame_time)\n        frame_filename = construct_image_filename_from_video_frame(video_filename_leaf, frame_time, outfile_format, outfile_dir)\n        extract_frame_microseconds(cap, microseconds, frame_filename)\n        row[VIAME_VIDEO_TIME_COL] = frame_filename\n        yield row\n</code></pre>"},{"location":"api/viame2coco/#viame2coco.viame2coco.filter_viame_manual_annotations","title":"<code>filter_viame_manual_annotations(viame_csv)</code>","text":"<p>filters an iterable of data rows read from a VIAME-style annotation csv to only rows that contain manual annotations</p> <p>Parameters:</p> Name Type Description Default <code>viame_csv</code> <code>Iterable[Sequence]</code> <p>the data rows from a VIAME-style annotation csv should not include the headers</p> required <p>Returns:</p> Name Type Description <code>viame_csv</code> <code>Iterable[Sequence]</code> <p>the data rows in the input only when the annotations are manual, skipping any automated annotations</p> Source code in <code>viame2coco/viame_manual_annotations.py</code> <pre><code>def filter_viame_manual_annotations(\n        viame_csv: Iterable[Sequence]) -&gt; Iterable[Sequence]:\n    '''\n    filters an iterable of data rows read from a VIAME-style annotation csv\n    to only rows that contain manual annotations\n\n    Parameters\n    ----------\n    viame_csv: Iterable[Sequence]\n        the data rows from a VIAME-style annotation csv\n        should not include the headers\n\n    Returns\n    -------\n    viame_csv: Iterable[Sequence]\n        the data rows in the input only when the annotations\n        are manual, skipping any automated annotations\n    '''\n    yield from filter(viame_is_manual_annotation, viame_csv)\n</code></pre>"},{"location":"api/viame2coco/#viame2coco.viame2coco.passrows","title":"<code>passrows(iterable, n=0)</code>","text":"<p>yield the first <code>n</code> rows in <code>iterable</code>. Useful with <code>itertools.chain</code> and <code>map</code> to  apply a function to only certain rows of an iterable</p> <p>Parameters:</p> Name Type Description Default <code>iterable</code> <code>Iterable</code> <p>any iterable</p> required <code>n</code> <code>int</code> <p>the number of rows to skip</p> <code>0</code> <p>Returns:</p> Name Type Description <code>iterable</code> <code>Iterable</code> <p>the iterable arg, but starting from the n+1th row</p> Source code in <code>viame2coco/viame2coco.py</code> <pre><code>def passrows(iterable: Iterable, n: int = 0) -&gt; Iterable:\n    '''\n    yield the first `n` rows in `iterable`.\n    Useful with `itertools.chain` and `map` to \n    apply a function to only certain rows of an iterable\n\n    Parameters\n    ----------\n    iterable: Iterable\n        any iterable\n    n: int\n        the number of rows to skip\n\n    Returns\n    -------\n    iterable: Iterable\n        the iterable arg, but starting from the n+1th row\n    '''\n    for i in range(n):\n        yield next(iterable)\n</code></pre>"},{"location":"api/viame2coco/#viame2coco.viame2coco.time2micros","title":"<code>time2micros(time)</code>","text":"<p>convert a datetime.time into total microseconds</p> <pre><code>&gt;&gt;&gt; time2micros(datetime.time(1,1,1)) # 1 hour, 1 min, 1 sec\n3661000000 \n\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>time</code> <code>time</code> <p>the time to convert into microseconds</p> required <p>Returns:</p> Name Type Description <code>microseconds</code> <code>float | int</code> <p>the total number of microseconds in the time argument</p> Source code in <code>viame2coco/viame_manual_annotations.py</code> <pre><code>def time2micros(time: datetime.time) -&gt; float:\n    '''\n    convert a datetime.time into total microseconds\n\n    ```\n    &gt;&gt;&gt; time2micros(datetime.time(1,1,1)) # 1 hour, 1 min, 1 sec\n    3661000000 \n\n    ```\n\n    Parameters\n    ----------\n    time: datetime.time\n        the time to convert into microseconds\n\n    Returns\n    -------\n    microseconds: float | int\n        the total number of microseconds in the time argument        \n    '''\n    return time.hour * MS2H + time.minute * MS2M + time.second * MS2S + time.microsecond\n</code></pre>"},{"location":"api/viame2coco/#viame2coco.viame2coco.viame2coco","title":"<code>viame2coco(viame_csv_file, description, video_file=None, video_frame_outfile_dir=None, license=COCO_CC0_LICENSE, version='0.1')</code>","text":"<p>Convert a VIAME-style annotation csv into COCO format</p> <p>Parameters:</p> Name Type Description Default <code>viame_csv_file</code> <code>str</code> <p>the file path location for the VIAME-style annotation csv</p> required <code>descriptions</code> <p>the description of this dataset</p> required <code>video_file</code> <code>str | None</code> <p>the file path location for the video which has been annotated.  If there is no video (i.e. the annotations are for images), then this should be None</p> <code>None</code> <code>video_frame_outfile_dir</code> <code>str | None</code> <p>a directory to which the extracted frames are writ</p> <code>None</code> <code>license</code> <code>COCOLicense</code> <p>the license under which these images are provided Defaults to CC0 https://creativecommons.org/public-domain/cc0/</p> <code>COCO_CC0_LICENSE</code> <code>version</code> <code>str</code> <p>the version of this dataset, as a string defaults to '0.1'</p> <code>'0.1'</code> Source code in <code>viame2coco/viame2coco.py</code> <pre><code>def viame2coco(\n        viame_csv_file: str, \n        description: str, \n        video_file: str | None = None, \n        video_frame_outfile_dir: str | None = None,\n        license: pycocowriter.coco.COCOLicense = COCO_CC0_LICENSE, \n        version: str = '0.1') -&gt; pycocowriter.coco.COCOData:\n    '''\n    Convert a VIAME-style annotation csv into COCO format\n\n    Parameters\n    ----------\n    viame_csv_file: str\n        the file path location for the VIAME-style annotation csv\n    descriptions: str\n        the description of this dataset\n    video_file: str | None\n        the file path location for the video which has been\n        annotated.  If there is no video (i.e. the annotations\n        are for images), then this should be None\n    video_frame_outfile_dir: str | None\n        a directory to which the extracted frames are writ\n    license: COCOLicense\n        the license under which these images are provided\n        Defaults to CC0 https://creativecommons.org/public-domain/cc0/\n    version: str\n        the version of this dataset, as a string\n        defaults to '0.1'\n    '''\n\n    now = datetime.datetime.now(datetime.timezone.utc)\n    coco_info = COCOInfo(\n        year = now.year,\n        version = version, \n        description = description, \n        date_created = now\n    )\n\n    #TODO probably should hoist this into a higher function\n    csv_location = os.path.split(viame_csv_file)[0]\n    if video_frame_outfile_dir is None:\n        video_frame_outfile_dir = csv_location\n    images, annotations, categories = viame2coco_data(\n        viame_csv_file, video_file=video_file, \n        video_frame_outfile_dir=video_frame_outfile_dir\n    )\n\n    return COCOData(\n        coco_info, \n        images, \n        annotations, \n        [license], \n        categories\n    )\n</code></pre>"},{"location":"api/viame2coco/#viame2coco.viame2coco.viame2coco_data","title":"<code>viame2coco_data(viame_csv_file, video_file=None, video_frame_outfile_dir=None)</code>","text":"<p>extract the images, annotations, and categories from a VIAME-style annotation csv, into COCO format.  Filters the data to only MANUAL annotations.</p> <p>If the annotations are for a video file, also extract the images for the manually-annotated frames</p> <p>Parameters:</p> Name Type Description Default <code>viame_csv_file</code> <code>str</code> <p>the file path location for the VIAME-style annotation csv</p> required <code>video_file</code> <code>str | None</code> <p>the file path location for the video which has been annotated.  If there is no video (i.e. the annotations are for images), then this should be None</p> <code>None</code> <code>video_frame_outfile_dir</code> <code>str | None</code> <p>a directory to which the extracted frames are writ</p> <code>None</code> <p>Returns:</p> Name Type Description <code>images</code> <code>list[COCOImage]</code> <p>a list of images contained in the CSV file, in COCO format, with appropriately-generated surrogate keys</p> <code>annotations</code> <code>list[COCOAnnotation]</code> <p>a list of the annotations contained in the CSV file, with appropriate surrogate-key references to the images and categories</p> <code>categories</code> <code>list[COCOCategory]</code> <p>a list of the categories contained in the CSV file, in COCO format, with appropriately-generated surrogate keys</p> Source code in <code>viame2coco/viame2coco.py</code> <pre><code>def viame2coco_data(\n        viame_csv_file: str, \n        video_file: str | None = None, \n        video_frame_outfile_dir: str | None = None) -&gt; tuple[\n            list[pycocowriter.coco.COCOImage],\n            list[pycocowriter.coco.COCOAnnotation],\n            list[pycocowriter.coco.COCOCategory]\n        ]:\n    '''\n    extract the images, annotations, and categories from a VIAME-style\n    annotation csv, into COCO format.  Filters the data to only MANUAL\n    annotations.\n\n    If the annotations are for a video file, also extract the images\n    for the manually-annotated frames\n\n    Parameters\n    ----------\n    viame_csv_file: str\n        the file path location for the VIAME-style annotation csv\n    video_file: str | None\n        the file path location for the video which has been\n        annotated.  If there is no video (i.e. the annotations\n        are for images), then this should be None\n    video_frame_outfile_dir: str | None\n        a directory to which the extracted frames are writ\n\n    Returns\n    -------\n    images: list[COCOImage]\n        a list of images contained in the CSV file, in COCO format,\n        with appropriately-generated surrogate keys\n    annotations: list[COCOAnnotation]\n        a list of the annotations contained in the CSV file, with\n        appropriate surrogate-key references to the images and categories\n    categories: list[COCOCategory]\n        a list of the categories contained in the CSV file, in COCO format,\n        with appropriately-generated surrogate keys\n    '''\n    with open(viame_csv_file, 'r') as f:\n        reader = csv.reader(f)\n        if video_file is not None:\n            reader = itertools.chain(\n                passrows(reader, 2),\n                extract_viame_video_annotations(\n                    reader, video_file, outfile_dir=video_frame_outfile_dir\n                )\n            )\n        csv2coco = Iterable2COCO(\n            Iterable2COCOConfig(viame_csv_config)\n        )\n        images, annotations, categories = csv2coco.parse(reader)\n        return images, annotations, categories\n</code></pre>"},{"location":"api/viame2coco/#viame2coco.viame2coco.viame_is_manual_annotation","title":"<code>viame_is_manual_annotation(viame_csv_row)</code>","text":"<p>returns whether a given row in a VIAME-style annotation output csv represents a manual annotation or an automated annotation.</p> <p>basically, just checks if the annotation confidence is 1</p> <p>Parameters:</p> Name Type Description Default <code>viame_csv_row</code> <code>Sequence</code> <p>a row read from a VIAME-style annotation csv</p> required <p>Returns:</p> Name Type Description <code>is_manual_annotation</code> <code>bool</code> <p>a boolean representing whether this row is manual or not</p> Source code in <code>viame2coco/viame_manual_annotations.py</code> <pre><code>def viame_is_manual_annotation(viame_csv_row: Sequence) -&gt; bool:\n    '''\n    returns whether a given row in a VIAME-style annotation output csv\n    represents a manual annotation or an automated annotation.\n\n    basically, just checks if the annotation confidence is 1\n\n    Parameters\n    ----------\n    viame_csv_row: Sequence\n        a row read from a VIAME-style annotation csv\n\n    Returns\n    -------\n    is_manual_annotation: bool\n        a boolean representing whether this row is manual or not \n    '''\n    is_manual_annotation = (\n        (len(viame_csv_row) &gt; VIAME_CONFIDENCE_COL) \n            and \n        (viame_csv_row[VIAME_CONFIDENCE_COL] == '1')\n    )\n    return is_manual_annotation\n</code></pre>"},{"location":"api/viame_manual_annotations/","title":"Viame Manual Annotation Tools","text":""},{"location":"api/viame_manual_annotations/#viame2coco.viame_manual_annotations.construct_image_filename_from_video_frame","title":"<code>construct_image_filename_from_video_frame(video_filename, time, outfile_format, outfile_dir)</code>","text":"<p>construct a filename from a given video file and frame time</p> <p>Parameters:</p> Name Type Description Default <code>video_filename</code> <code>str</code> <p>the file name of the video.  This will be formatted into the outfile_format as <code>video_filename</code>.  See that arg for more details.</p> required <code>time</code> <code>time</code> <p>the time that locates the desired frame in the video</p> required <code>outfile_format</code> <code>str | None</code> <p>if None, defaults to '{video_filename}.%H.%M.%S.%f.jpg' <code>video_filename</code> is the argument of this name to this function The remainder is passed through a <code>strftime</code> from the time arg, see the <code>strftime</code> docs the extension <code>.jpg</code> will determine the output file format if this filename is used to write an image file.</p> required <code>outfile_dir</code> <code>str | None</code> <p>if not None, this is simply path joined to the filename output</p> required <p>Returns:</p> Name Type Description <code>frame_filename</code> <code>str</code> <p>a filename appropriate for the specified frame in the video</p> Source code in <code>viame2coco/viame_manual_annotations.py</code> <pre><code>def construct_image_filename_from_video_frame(\n        video_filename: str, \n        time: datetime.time, \n        outfile_format: str | None, \n        outfile_dir: str | None) -&gt; str:\n    '''\n    construct a filename from a given video file and frame time\n\n    Parameters\n    ----------\n    video_filename: str\n        the file name of the video.  This will be formatted into the\n        outfile_format as `video_filename`.  See that arg for more details.\n    time: datetime.time\n        the time that locates the desired frame in the video\n    outfile_format: str | None\n        if None, defaults to '{video_filename}.%H.%M.%S.%f.jpg'\n        `video_filename` is the argument of this name to this function\n        The remainder is passed through a `strftime` from the time arg,\n        see the [`strftime` docs](https://docs.python.org/3/library/datetime.html#format-codes)\n        the extension `.jpg` will determine the output file format if this\n        filename is used to write an image file.\n    outfile_dir: str | None\n        if not None, this is simply path joined to the filename output\n\n    Returns\n    -------\n    frame_filename: str\n        a filename appropriate for the specified frame in the video\n    '''\n    if outfile_format is None:\n        outfile_format = '{video_filename}.%H.%M.%S.%f.jpg'\n    frame_filename = time.strftime(outfile_format).format(video_filename = video_filename)\n    if outfile_dir is not None:\n        frame_filename = os.path.join(outfile_dir, frame_filename)\n    return frame_filename\n</code></pre>"},{"location":"api/viame_manual_annotations/#viame2coco.viame_manual_annotations.extract_frame_microseconds","title":"<code>extract_frame_microseconds(cv2_video_cap, microseconds, outfile=None)</code>","text":"<p>extract a frame from the provided cv2 video at the given number  of microseconds.  Optionally write the frame to outfile.</p> <p>Parameters:</p> Name Type Description Default <code>cv2_video_cap</code> <code>VideoCapture</code> <p>the video from which to capture the frame</p> required <code>microseconds</code> <code>float</code> <p>the location in microseconds into the video at which to extract the desired frame</p> required <code>outfile</code> <code>str | None</code> <p>the optional filename to which the desired frame should  be writ</p> <code>None</code> <p>Returns:</p> Name Type Description <code>image</code> <code>ndarray | None</code> <p>the video frame at the given number of microseconds, or None if the frame read was unsuccessful.  Additionally, the frame may be written to a file as a side-effect if <code>outfile</code> was passed as an argument.</p> Source code in <code>viame2coco/viame_manual_annotations.py</code> <pre><code>def extract_frame_microseconds(\n        cv2_video_cap: cv2.VideoCapture, \n        microseconds: float, \n        outfile: str | None = None) -&gt; np.ndarray | None:\n    '''\n    extract a frame from the provided cv2 video at the given number \n    of microseconds.  Optionally write the frame to outfile.\n\n    Parameters\n    ----------\n    cv2_video_cap: cv2.VideoCapture\n        the video from which to capture the frame\n    microseconds: float\n        the location in microseconds into the video\n        at which to extract the desired frame\n    outfile: str | None:\n        the optional filename to which the desired frame should \n        be writ\n    Returns\n    -------\n    image: numpy.ndarray | None\n        the video frame at the given number of microseconds, or None\n        if the frame read was unsuccessful.  Additionally, the frame\n        may be written to a file as a side-effect if `outfile` was\n        passed as an argument.\n    '''\n    cv2_video_cap.set(cv2.CAP_PROP_POS_MSEC, microseconds // 1000)\n    success, image = cv2_video_cap.read()\n    if outfile is not None:\n        cv2.imwrite(outfile, image)\n    return image\n</code></pre>"},{"location":"api/viame_manual_annotations/#viame2coco.viame_manual_annotations.extract_viame_video_annotations","title":"<code>extract_viame_video_annotations(viame_csv, video_file, outfile_format=None, outfile_dir=None)</code>","text":"<p>extract the manual annotations and frames from a VIAME-style annotaiton csv</p> <p>Writes the frames to files.</p> <p>Parameters:</p> Name Type Description Default <code>viame_csv</code> <code>Iterable[Sequence]</code> <p>the data rows from a VIAME-style annotation csv should not include the headers</p> required <code>video_filename</code> <p>the file name of the video.  This will be formatted into the outfile_format as <code>video_filename</code>.  See that arg for more details.</p> required <code>outfile_format</code> <code>str | None</code> <p>see <code>construct_image_filename_from_video_frame</code> signature</p> <code>None</code> <code>outfile_dir</code> <code>str | None</code> <p>see <code>construct_image_filename_from_video_frame</code> signature</p> <code>None</code> <p>Returns:</p> Name Type Description <code>viame_csv</code> <code>Iterable[Sequence]</code> <p>the data rows in the input only when the annotations are manual, skipping any automated annotations</p> Source code in <code>viame2coco/viame_manual_annotations.py</code> <pre><code>def extract_viame_video_annotations(\n        viame_csv: Iterable[Sequence], \n        video_file: str, \n        outfile_format: str | None = None, \n        outfile_dir: str | None = None) -&gt; Iterable[Sequence]:\n    '''\n    extract the manual annotations and frames from a VIAME-style\n    annotaiton csv\n\n    Writes the frames to files.\n\n    Parameters\n    ----------\n    viame_csv: Iterable[Sequence]\n        the data rows from a VIAME-style annotation csv\n        should not include the headers\n    video_filename: str\n        the file name of the video.  This will be formatted into the\n        outfile_format as `video_filename`.  See that arg for more details.\n    outfile_format: str | None\n        see `construct_image_filename_from_video_frame` signature\n    outfile_dir: str | None\n        see `construct_image_filename_from_video_frame` signature\n\n    Returns\n    -------\n    viame_csv: Iterable[Sequence]\n        the data rows in the input only when the annotations\n        are manual, skipping any automated annotations\n    '''\n    cap = cv2.VideoCapture(video_file)\n    video_filename_leaf = os.path.split(video_file)[1]\n    if outfile_dir is not None:\n        os.makedirs(outfile_dir, exist_ok=True)\n    for row in filter_viame_manual_annotations(viame_csv):\n        frame_time = datetime.time.fromisoformat(row[VIAME_VIDEO_TIME_COL])\n        microseconds = time2micros(frame_time)\n        frame_filename = construct_image_filename_from_video_frame(video_filename_leaf, frame_time, outfile_format, outfile_dir)\n        extract_frame_microseconds(cap, microseconds, frame_filename)\n        row[VIAME_VIDEO_TIME_COL] = frame_filename\n        yield row\n</code></pre>"},{"location":"api/viame_manual_annotations/#viame2coco.viame_manual_annotations.filter_viame_manual_annotations","title":"<code>filter_viame_manual_annotations(viame_csv)</code>","text":"<p>filters an iterable of data rows read from a VIAME-style annotation csv to only rows that contain manual annotations</p> <p>Parameters:</p> Name Type Description Default <code>viame_csv</code> <code>Iterable[Sequence]</code> <p>the data rows from a VIAME-style annotation csv should not include the headers</p> required <p>Returns:</p> Name Type Description <code>viame_csv</code> <code>Iterable[Sequence]</code> <p>the data rows in the input only when the annotations are manual, skipping any automated annotations</p> Source code in <code>viame2coco/viame_manual_annotations.py</code> <pre><code>def filter_viame_manual_annotations(\n        viame_csv: Iterable[Sequence]) -&gt; Iterable[Sequence]:\n    '''\n    filters an iterable of data rows read from a VIAME-style annotation csv\n    to only rows that contain manual annotations\n\n    Parameters\n    ----------\n    viame_csv: Iterable[Sequence]\n        the data rows from a VIAME-style annotation csv\n        should not include the headers\n\n    Returns\n    -------\n    viame_csv: Iterable[Sequence]\n        the data rows in the input only when the annotations\n        are manual, skipping any automated annotations\n    '''\n    yield from filter(viame_is_manual_annotation, viame_csv)\n</code></pre>"},{"location":"api/viame_manual_annotations/#viame2coco.viame_manual_annotations.time2micros","title":"<code>time2micros(time)</code>","text":"<p>convert a datetime.time into total microseconds</p> <pre><code>&gt;&gt;&gt; time2micros(datetime.time(1,1,1)) # 1 hour, 1 min, 1 sec\n3661000000 \n\n</code></pre> <p>Parameters:</p> Name Type Description Default <code>time</code> <code>time</code> <p>the time to convert into microseconds</p> required <p>Returns:</p> Name Type Description <code>microseconds</code> <code>float | int</code> <p>the total number of microseconds in the time argument</p> Source code in <code>viame2coco/viame_manual_annotations.py</code> <pre><code>def time2micros(time: datetime.time) -&gt; float:\n    '''\n    convert a datetime.time into total microseconds\n\n    ```\n    &gt;&gt;&gt; time2micros(datetime.time(1,1,1)) # 1 hour, 1 min, 1 sec\n    3661000000 \n\n    ```\n\n    Parameters\n    ----------\n    time: datetime.time\n        the time to convert into microseconds\n\n    Returns\n    -------\n    microseconds: float | int\n        the total number of microseconds in the time argument        \n    '''\n    return time.hour * MS2H + time.minute * MS2M + time.second * MS2S + time.microsecond\n</code></pre>"},{"location":"api/viame_manual_annotations/#viame2coco.viame_manual_annotations.viame_is_manual_annotation","title":"<code>viame_is_manual_annotation(viame_csv_row)</code>","text":"<p>returns whether a given row in a VIAME-style annotation output csv represents a manual annotation or an automated annotation.</p> <p>basically, just checks if the annotation confidence is 1</p> <p>Parameters:</p> Name Type Description Default <code>viame_csv_row</code> <code>Sequence</code> <p>a row read from a VIAME-style annotation csv</p> required <p>Returns:</p> Name Type Description <code>is_manual_annotation</code> <code>bool</code> <p>a boolean representing whether this row is manual or not</p> Source code in <code>viame2coco/viame_manual_annotations.py</code> <pre><code>def viame_is_manual_annotation(viame_csv_row: Sequence) -&gt; bool:\n    '''\n    returns whether a given row in a VIAME-style annotation output csv\n    represents a manual annotation or an automated annotation.\n\n    basically, just checks if the annotation confidence is 1\n\n    Parameters\n    ----------\n    viame_csv_row: Sequence\n        a row read from a VIAME-style annotation csv\n\n    Returns\n    -------\n    is_manual_annotation: bool\n        a boolean representing whether this row is manual or not \n    '''\n    is_manual_annotation = (\n        (len(viame_csv_row) &gt; VIAME_CONFIDENCE_COL) \n            and \n        (viame_csv_row[VIAME_CONFIDENCE_COL] == '1')\n    )\n    return is_manual_annotation\n</code></pre>"}]}